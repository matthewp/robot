---
import RobotLogo from '../components/RobotLogo.astro';
import ContentSection from '../components/ContentSection.astro';
import FeatureCard from '../components/FeatureCard.astro';
import InfoBox from '../components/InfoBox.astro';
import CodeBlock from '../components/CodeBlock.astro';
import Footer from '../components/Footer.astro';
import Code from '../icons/Code.astro';
import Zap from '../icons/Zap.astro';
import ArrowRight from '../icons/ArrowRight.astro';
import Github from '../icons/GitHub.astro';
import Terminal from '../icons/Terminal.astro';
import BookOpen from '../icons/BookOpen.astro';
import CommonHead from '../components/CommonHead.astro';
import '../styles/base.css';
---

<html lang="en">
<head>
  <title>Robot</title>
  <CommonHead />
</head>
<body>
<div class="min-h-screen bg-gradient-to-b from-purple-900 via-indigo-900 to-blue-900 text-gray-100">
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="absolute inset-0 opacity-10">
      {[...Array(20)].map((_, i) => (
        <div
          class="absolute left-0 right-0 h-px bg-cyan-400"
          style={{
            top: `${i * 5}%`,
            animation: `scanline 8s ${i * 0.1}s infinite linear`
          }}
        />
      ))}
    </div>
  </div>

  <div class="container mx-auto px-4 py-16 relative">
    <div class="flex flex-col items-center text-center space-y-6">
      <div 
        class="relative w-32 h-32 cursor-pointer group"
      >
        <div class="
          absolute inset-0 bg-gradient-to-r from-cyan-400 to-blue-500 
          rounded-full flex items-center justify-center transform transition-all duration-300
            group-hover:scale-110 group-hover:rotate-180
        ">
          <div class="w-24 h-24 transition-transform duration-300 group-hover:rotate-180">
            <RobotLogo />
          </div>
        </div>
        <div class="absolute -inset-4 bg-cyan-400 opacity-20 rounded-full animate-pulse" />
      </div>
      
      <h1 class="text-6xl font-bold font-mono bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-pink-500">
        ROBOT
      </h1>
      
      <div class="flex items-center space-x-2 text-xl text-cyan-300 font-mono">
        <Zap class="animate-bounce" />
        <span>1KB OF PURE MECHANICAL MAGIC</span>
        <Zap class="animate-bounce" />
      </div>

      <div class="flex gap-6 mt-8">
        <a href="/docs/" class="group bg-cyan-500 hover:bg-cyan-400 text-black font-mono px-8 py-4 rounded-xl flex items-center gap-2 transform hover:scale-105 transition-all">
          BOOT UP
          <ArrowRight class="group-hover:translate-x-1 transition-transform" />
        </a>
        <a href="https://github.com/matthewp/robot" class="group bg-gray-800 hover:bg-gray-700 font-mono px-8 py-4 rounded-xl flex items-center gap-2 border-2 border-cyan-500 transform hover:scale-105 transition-all">
          <Github />
          SOURCE_CODE
        </a>
      </div>
    </div>
  </div>

  {/* Key Features Section */}
  <div class="container mx-auto px-4 py-16">
    <div class="grid md:grid-cols-3 gap-8">
      <FeatureCard
        title="TINY_FOOTPRINT.exe"
        description="Just 1KB of pure robotic efficiency. No bloat, all bot!"
      >
        <Terminal size={24} />
      </FeatureCard>
      <FeatureCard
        title="TYPE_SAFE.sys"
        description="Bulletproof typing that would make even a robot proud"
      >
        <Code size={24} />
      </FeatureCard>
      <FeatureCard
        title="DOCS.readme"
        description="Documentation so clear, even humans can understand it"
      >
        <BookOpen size={24} />
      </FeatureCard>
    </div>
  </div>

  {/* Content Sections */}
  <div class="container mx-auto px-4 py-16 space-y-16">
    <ContentSection
      title="Why Finite State Machines"
      subtitle="A better way to handle complex UI state"
    >
      <div class="space-y-6 text-gray-300 leading-relaxed">
        <p>
          With Finite State Machines the term <code class="text-cyan-400 bg-gray-800 px-2 py-1 rounded">state</code> might
          not mean what you think. In the frontend we tend to think of state to mean <em>all</em> of
          the variables that control the UI. When we say <code class="text-cyan-400 bg-gray-800 px-2 py-1 rounded">state</code> in
          Finite State Machines, we mean a higher-level sort of state.
        </p>

        <p>
          For example, on the GitHub issue page, the issue titles can be edited by the issue creator
          and repo maintainers. Initially a title is displayed like this:
        </p>

        <img
          src="/images/issue-view-mode.png"
          alt="Issue title in preview mode"
          class="rounded-lg my-6 filter grayscale brightness-75 contrast-125 border border-cyan-500/30"
        />

        <p>
          The edit button (in red) changes the view so that the title is in an input for editing,
          and the buttons change as well:
        </p>

        <img
          src="/images/issue-edit-mode.png"
          alt="Issue title in edit mode"
          class="rounded-lg my-6 filter grayscale brightness-75 contrast-125 border border-cyan-500/30"
        />

        <p>
          If we call this <strong class="text-cyan-400">edit mode</strong> you might be inclined to represent this state as a boolean and the title as a string:
        </p>

        <CodeBlock
          title="SIMPLE_STATE.js"
          code="let editMode = false;\nlet title = '';"
        />

        <p>
          When the <strong class="text-cyan-400">Edit</strong> button is clicked you would toggle the <code class="text-cyan-400 bg-gray-800 px-2 py-1 rounded">editMode</code> variable to <code class="text-cyan-400 bg-gray-800 px-2 py-1 rounded">true</code>. When <strong class="text-cyan-400">Save</strong> or <strong class="text-cyan-400">Cancel</strong> are clicked, toggle it back to <code class="text-cyan-400 bg-gray-800 px-2 py-1 rounded">false</code>.
        </p>

        <p>
          But <em>oops</em>, we're missing something here. When you click <strong class="text-cyan-400">Save</strong> it should keep the changed title and save that via an API call. When you click <strong class="text-cyan-400">Cancel</strong> it should forget your changes and restore the previous title.
        </p>

        <p>
          So we have some new states we've discovered, the <strong class="text-cyan-400">cancel</strong> state and the <strong class="text-cyan-400">save</strong> state. You might not think of these as states, but rather just some code that you run on events. Think of what happens when you click Save; it makes an external request to a server. That request could fail for a number of reasons. Or you might want to display a loading indicator while the save is taking place. This is definitely a state! <strong class="text-cyan-400">Cancel</strong>, while more simple and immediate, is also a state, as it at least requires some logic to tell the application that the newly inputted title can be ignored.
        </p>

        <p>
          You can imagine this component having more states as well. What should happen if the user blanks out the input and then clicks save? You can't have an empty title. It seems that this component should have some sort of <strong class="text-cyan-400">validation</strong> state as well. So we've identified at least 6 states:
        </p>

        <ul class="list-disc list-inside space-y-2 ml-4 text-gray-300">
          <li><strong class="text-cyan-400">preview</strong>: The default view when on an issue page.</li>
          <li><strong class="text-cyan-400">edit</strong>: When in edit mode.</li>
          <li><strong class="text-cyan-400">save</strong>: When saving to a remote API.</li>
          <li><strong class="text-cyan-400">error</strong>: When the API server errors for some reason.</li>
          <li><strong class="text-cyan-400">cancel</strong>: When rolling back changes from edit mode.</li>
          <li><strong class="text-cyan-400">validate</strong>: When confirming the new input title is an acceptable string.</li>
        </ul>

        <p>
          I'll spare you the code, but you can imagine that writing this logic imperatively can result in a number of bugs. You might be tempted to represent these states as a bunch of booleans:
        </p>

        <CodeBlock
          title="BOOLEAN_FLAGS.js"
          code="let editMode = false;\nlet saving = false;\nlet validating = false;\nlet saveHadError = false;"
        />

        <p>
          And then toggle these booleans in response to the appropriate event. We've all written code this way. You can pull it off, but why do so when you don't have to? Take, for example, what happens when new requirements are added, resulting in yet another new state of this component. You would need to add another boolean, and change all of your code to toggle the boolean as needed.
        </p>

        <p>
          In recent years there has been a revolution in <a href="https://en.wikipedia.org/wiki/Declarative_programming" class="text-cyan-400 hover:text-cyan-300 underline">declarative programming</a> in the front-end. We use tools such as <a href="https://reactjs.org/" class="text-cyan-400 hover:text-cyan-300 underline">React</a> to represent our UI as a function of state. This is great, but we still write imperative code to manage our state like this:
        </p>

        <CodeBlock
          title="IMPERATIVE_STATE.js"
          code="function resetState() {\n  setValidating(false);\n  setSaving(false);\n  setBlurred(false);\n  setEditing(false);\n  if(!focused) setTouched(false);\n  setDirty(true);\n}"
        />

        <p>
          <a href="https://en.wikipedia.org/wiki/Finite-state_machine" class="text-cyan-400 hover:text-cyan-300 underline">Finite State Machines</a> bring the declarative revolution to application (and component) state. By representing your states declaratively you can <strong class="text-cyan-400">eliminate invalid states</strong> and prevent an entire category of bugs. Finite State Machines are like static typing for your states.
        </p>

        <p>
          Robot is a Finite State Machine library meant to be simple, functional, and fun. With Robot you might represent this title component like so:
        </p>

        <CodeBlock
          title="TITLE_MACHINE.robot"
          code="import { createMachine, guard, immediate, invoke, state, transition, reduce } from 'robot3';\n\nconst machine = createMachine({\n  preview: state(\n    transition('edit', 'editMode',\n      // Save the current title as oldTitle so we can reset later.\n      reduce(ctx => ({ ...ctx, oldTitle: ctx.title }))\n    )\n  ),\n  editMode: state(\n    transition('input', 'editMode',\n      reduce((ctx, ev) => ({ ...ctx, title: ev.target.value }))\n    ),\n    transition('cancel', 'cancel'),\n    transition('save', 'validate')\n  ),\n  cancel: state(\n    immediate('preview',\n      // Reset the title back to oldTitle\n      reduce(ctx => ({ ...ctx, title: ctx.oldTitle }))\n    )\n  ),\n  validate: state(\n    // Check if the title is valid. If so go\n    // to the save state, otherwise go back to editMode\n    immediate('save', guard(titleIsValid)),\n    immediate('editMode')\n  ),\n  save: invoke(saveTitle,\n    transition('done', 'preview'),\n    transition('error', 'error')\n  ),\n  error: state(\n    // Should we provide a retry or...?\n  )\n});"
        />

        <p>
          This <em>might</em> seem like a lot of code, but consider that:
        </p>

        <ul class="list-disc list-inside space-y-2 ml-4 text-gray-300">
          <li>This prevents the component from ever being in an invalid state.</li>
          <li>This captures <em>all</em> of the possible states. When writing imperative code you often ignore uncommon or inconvenient states like errors. With Finite State Machines it's much harder to ignore reality.</li>
          <li>States and transitions are validated at the moment that the machine is created and will throw when using <a href="/docs/" class="text-cyan-400 hover:text-cyan-300 underline">robot/debug</a>.</li>
        </ul>

      </div>
    </ContentSection>

    <ContentSection
      title="Inspiration"
      subtitle="Standing on the shoulders of giants"
    >
      <div class="space-y-6 text-gray-300 leading-relaxed">
        <p>
          Robot is inspired by a variety of projects involving finite state machines including:
        </p>

        <div class="grid md:grid-cols-1 gap-6">
          <div class="bg-gray-800/50 rounded-lg p-6 border border-cyan-500/20 hover:border-cyan-400 transition-colors">
            <h4 class="font-mono text-lg font-bold text-cyan-400 mb-3">
              <a href="https://statecharts.dev/" class="hover:text-cyan-300 transition-colors" target="_blank" rel="noopener noreferrer">
                Statecharts
              </a>
            </h4>
            <p class="text-gray-300 text-sm">
              The specification that fixes some of the issues with Finite State Machines. Robot adopts a number of these changes.
            </p>
          </div>

          <div class="bg-gray-800/50 rounded-lg p-6 border border-cyan-500/20 hover:border-cyan-400 transition-colors">
            <h4 class="font-mono text-lg font-bold text-cyan-400 mb-3">
              <a href="https://xstate.js.org/" class="hover:text-cyan-300 transition-colors" target="_blank" rel="noopener noreferrer">
                XState
              </a>
            </h4>
            <p class="text-gray-300 text-sm">
              The excellent JavaScript library that implements the Statecharts XML spec.
            </p>
          </div>

          <div class="bg-gray-800/50 rounded-lg p-6 border border-cyan-500/20 hover:border-cyan-400 transition-colors">
            <h4 class="font-mono text-lg font-bold text-cyan-400 mb-3">
              <a href="https://github.com/p-org/P" class="hover:text-cyan-300 transition-colors" target="_blank" rel="noopener noreferrer">
                The P Programming Language
              </a>
            </h4>
            <p class="text-gray-300 text-sm">
              A DSL for representing Finite State Machines.
            </p>
          </div>
        </div>
      </div>
    </ContentSection>
  </div>

  <style is:inline>
    @keyframes scanline {
      0% { transform: translateY(0) translateX(-100%); }
      100% { transform: translateY(0) translateX(100%); }
    }
  </style>

  <Footer />
</div>
</body>
</html>
